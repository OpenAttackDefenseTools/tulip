version: "3.5"
services:
  timescale:
    build: services/timescale
    image: tulip-timescale:latest
    restart: unless-stopped
    volumes:
    - timescale-data:/var/lib/postgresql/data
    - ./services/schema/system.sql:/docker-entrypoint-initdb.d/100_system.sql:ro
    - ./services/schema/functions.sql:/docker-entrypoint-initdb.d/101_functions.sql:ro
    - ./services/schema/schema.sql:/docker-entrypoint-initdb.d/102_schema.sql:ro
    networks:
      - internal
    ports:
      - "5432"
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_USER: tulip
      POSTGRES_DB: tulip
    # This does not need to be adjusted, unless you actually want to limit it
    # Postgres uses shared memory for caching, and docker assigns just 64 MB by default
    # This is the available size of the volume, not the memory limit of the container
    shm_size: '128g'

  frontend:
    build:
      context: frontend
      dockerfile: Dockerfile-frontend
    image: tulip-frontend:latest
    restart: unless-stopped
    ports:
      - "3000:3000"
    expose:
      - 3000
    depends_on:
      - timescale
      - api
    networks:
      - internal
    environment:
      API_SERVER_ENDPOINT: http://api:5000/
      VIRTUAL_HOST: tulip.h4xx.eu

  api:
    build:
      context: services/api
      dockerfile: Dockerfile-api
    image: tulip-api:latest
    restart: unless-stopped
    depends_on:
      - timescale
    networks:
      - internal
    volumes:
      - ${TRAFFIC_DIR_HOST}:${TRAFFIC_DIR_DOCKER}:ro,z
    environment:
      TIMESCALE: ${TIMESCALE}
      TULIP_TRAFFIC_DIR: ${TRAFFIC_DIR_DOCKER}
      FLAG_REGEX: ${FLAG_REGEX}
      TICK_START: ${TICK_START}
      TICK_LENGTH: ${TICK_LENGTH}
      VM_IP: ${VM_IP}

  flagids:
    restart: unless-stopped
    build:
      context: services/flagids
    image: tulip-flagids:latest
    depends_on:
      - timescale
    networks:
      - internal
    environment:
      TIMESCALE: ${TIMESCALE}
      TICK_START: ${TICK_START}
      TICK_LENGTH: ${TICK_LENGTH}
      FLAGID_SCRAPE: ${FLAGID_SCRAPE}
      TEAM_ID: ${TEAM_ID}
      FLAGID_ENDPOINT: ${FLAGID_ENDPOINT}
      VISUALIZER_URL: ${VISUALIZER_URL}
      DUMP_PCAPS: ${DUMP_PCAPS}

  assembler:
    build:
      context: services/go-importer
      dockerfile: Dockerfile-assembler
    image: tulip-assembler:latest
    restart: unless-stopped
    depends_on:
      - timescale
    networks:
      - internal
    volumes:
      - ${TRAFFIC_DIR_HOST}:${TRAFFIC_DIR_DOCKER}:ro,z
    # Command line flags most likely to fix a tulip issue:
    # - -http-session-tracking: enable HTTP session tracking
    # - -dir: directory to read traffic from
    # - -skipchecksum: skip checksum validation
    # - -flush-after: i.e. 2m Not needed in pcap rotation mode
    # - -disable-converters: disable converters
    # - -discard-extra-data: dont split large flow items, just discard them
    command: "./assembler -http-session-tracking -skipchecksum -disable-converters -dir ${TRAFFIC_DIR_DOCKER}"
    environment:
      TIMESCALE: ${TIMESCALE}
      FLAG_REGEX: ${FLAG_REGEX}
      TICK_START: ${TICK_START}
      TICK_LENGTH: ${TICK_LENGTH}
      FLAGID_SCAN: ${FLAGID_SCAN}
      FLAG_LIFETIME: ${FLAG_LIFETIME}
      FLAG_VALIDATOR_TYPE: ${FLAG_VALIDATOR_TYPE}
      FLAG_VALIDATOR_TEAM: ${FLAG_VALIDATOR_TEAM}
      PCAP_OVER_IP: ${PCAP_OVER_IP}
      DUMP_PCAPS: ${DUMP_PCAPS}
      DUMP_PCAPS_INTERVAL: ${DUMP_PCAPS_INTERVAL}
      DUMP_PCAPS_FILENAME: ${DUMP_PCAPS_FILENAME}
    extra_hosts:
      - "host.docker.internal:host-gateway"

  enricher:
    build:
      context: services/go-importer
      dockerfile: Dockerfile-enricher
    image: tulip-enricher:latest
    restart: unless-stopped
    depends_on:
      - timescale
    networks:
      - internal
    volumes:
      - ${TRAFFIC_DIR_HOST}:${TRAFFIC_DIR_DOCKER}:ro,z
    command: "./enricher -eve ${TRAFFIC_DIR_DOCKER}/eve.json"
    environment:
      TIMESCALE: ${TIMESCALE}

volumes:
  timescale-data:

networks:
  internal:
